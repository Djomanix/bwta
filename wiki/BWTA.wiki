#sidebar TableOfContents

Library header file: [http://code.google.com/p/bwta/source/browse/trunk/include/BWTA.h# BWTA.h]

Global functions:

  * [#readMap readMap]
  * [#analyze analyze]
  * [#getRegions getRegions]
  * [#getChokepoints getChokepoints]
  * [#getBaseLocations getBaseLocations]
  * [#getStartLocations getStartLocations]
  * [#getUnwalkablePolygons getUnwalkablePolygons]
  * [#getNearestUnwalkablePosition getNearestUnwalkablePosition]
  * [#getStartLocation getStartLocation]
  * [#getNearestBaseLocation getNearestBaseLocation]

=== readMap ===
void readMap();

Reads the contents of the map in to BWTA. This was added so analyze() can be executed in another thread.

=== analyze ===
void analyze();

Before any other global functions can be called, the map must first be analyzed. Analyzing a starcraft map can take a long time, depending on your computer, so BWTA also automatically saves the results to a file when it is done. When you call analyze on the same map, BWTA will see that the results file for that map already exists, and load the results from file, rather than re-analyze the map.

=== getRegions ===
std::set<[Region]{{{*}}}>& getRegions();

Returns the set of regions in the map.

=== getChokepoints ===
std::set<[Chokepoint]{{{*}}}>& getChokepoints();

Returns the set of chokepoints in the map.

=== getBaseLocations ===
std::set<[BaseLocation]{{{*}}}>& getBaseLocations();

Returns the set of base locations on the map.

=== getStartLocations ===
std::set<[BaseLocation]{{{*}}}>& getStartLocations();

Returns the set of base locations that are start locations.

=== getUnwalkablePolygons ===
const std::set<Polygon{{{*}}}>& getUnwalkablePolygons();

Returns the set of unwalkable polygons.

=== getNearestUnwalkablePosition ===
BWAPI::Position getNearestUnwalkablePosition(BWAPI::Position position);

Returns the nearest position that is on the boundary of an unwalkable polygon.

=== getStartLocation ===
[BaseLocation]{{{*}}} getStartLocation([http://code.google.com/p/bwapi/wiki/BWAPIManual BWAPI]::[http://code.google.com/p/bwapi/wiki/Player Player]{{{*}}} player);

Given a pointer to a BWAPI::Player object, this function returns a pointer to the player's starting base location.

=== getNearestBaseLocation ===
[BaseLocation]{{{*}}} getNearestBaseLocation([http://code.google.com/p/bwapi/wiki/BWAPIManual BWAPI]::[http://code.google.com/p/bwapi/wiki/Misc#TilePosition TilePosition] position);

Returns the base location that is closest (in euclidean distance) to the given tile position.